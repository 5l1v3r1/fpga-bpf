$date
	Sun Nov  3 18:14:17 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module cpu_adapter_tb $end
$var wire 9 ! word_rd_addra [8:0] $end
$var wire 32 " resized_mem_data [31:0] $end
$var wire 1 # rd_en $end
$var wire 32 $ cached_data [31:0] $end
$var wire 1 % cache_hit $end
$var reg 64 & bigword [63:0] $end
$var reg 12 ' byte_rd_addr [11:0] $end
$var reg 1 ( clk $end
$var reg 1 ) cpu_rd_en $end
$var reg 1 * rst $end
$var reg 2 + transfer_sz [1:0] $end
$var integer 32 , dummy [31:0] $end
$var integer 32 - fd [31:0] $end
$scope module DUT $end
$var wire 64 . bigword [63:0] $end
$var wire 64 / bigword_i [63:0] $end
$var wire 12 0 byte_rd_addr [11:0] $end
$var wire 12 1 byte_rd_addr_i [11:0] $end
$var wire 1 % cache_hit $end
$var wire 1 2 cache_hit_i $end
$var wire 32 3 cached_data [31:0] $end
$var wire 32 4 cached_data_i [31:0] $end
$var wire 1 ( clk $end
$var wire 1 ) cpu_rd_en $end
$var wire 1 5 cpu_rd_en_i $end
$var wire 1 # rd_en $end
$var wire 1 6 rd_en_i $end
$var wire 1 * rst $end
$var wire 2 7 transfer_sz [1:0] $end
$var wire 9 8 word_rd_addra [8:0] $end
$var wire 9 9 word_rd_addra_i [8:0] $end
$var wire 2 : transfer_sz_i [1:0] $end
$var wire 32 ; selected [31:0] $end
$var wire 32 < resized_mem_data_i [31:0] $end
$var wire 32 = resized_mem_data [31:0] $end
$var wire 2 > offset_i [1:0] $end
$var reg 6 ? offset_r [5:0] $end
$var reg 6 @ transfer_sz_r [5:0] $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk3 $end
$var reg 32 A resized_mem_data_r [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 A
bx @
bx ?
bx >
b0 =
bx <
bx ;
bx :
b11 9
b11 8
b0 7
06
05
b111000001100110011000000111 4
b111000001100110011000000111 3
02
b1101 1
b1101 0
b0 /
b0 .
b10000000000000000000000000000011 -
bx ,
b0 +
0*
0)
0(
b1101 '
b0 &
0%
b111000001100110011000000111 $
0#
b0 "
b11 !
$end
#5000
bx "
bx =
bx A
bx00 @
bx01 ?
1(
#5010
b1 !
b1 8
b1 9
b100 ,
b1000000000001001000000000001000110000000000110100000000000100 /
b1000000000001001000000000001000110000000000110100000000000100 &
b1000000000001001000000000001000110000000000110100000000000100 .
1#
16
15
1)
b111 1
b111 '
b111 0
#10000
0(
#15000
bx0111 ?
bx0000 @
1(
#15010
b100 !
b100 8
b100 9
b101000000000101011000000000011001110000000001111000000000001000 /
b101000000000101011000000000011001110000000001111000000000001000 &
b101000000000101011000000000011001110000000001111000000000001000 .
b1 +
b1 7
b10000 1
b10000 '
b10000 0
#20000
0(
#25000
b101011000000000011001110000 <
b0 :
b101011000000000011001110000 ;
b1 >
b1 @
b11100 ?
1(
#25010
b1001101000000000101010110000 <
b0 !
b0 8
b0 9
b1001101000000000101010110000 ;
b1001000000001001101000000000101010110000000010111100000000001100 /
b1001000000001001101000000000101010110000000010111100000000001100 &
b1001000000001001101000000000101010110000000010111100000000001100 .
b10 +
b10 7
b10 1
b10 '
b10 0
#30000
0(
#35000
b1010101100000000101111000000 <
b1010101100000000101111000000 ;
b11 >
b1001101000000000101010110000 "
b1001101000000000101010110000 =
b1001101000000000101010110000 A
b110010 ?
b110 @
1(
#35010
b11101111110010101111111011011110 <
b11101111110010101111111011011110 ;
b1101111010101101101111101110111111001010111111101101111010101101 /
b1101111010101101101111101110111111001010111111101101111010101101 &
b1101111010101101101111101110111111001010111111101101111010101101 .
b0 +
b0 7
b0 1
b0 '
b0 0
#40000
0(
#45000
b1101111010101101 <
b1 :
b11011110101011011011111011101111 ;
b0 >
b11101111110010101111111011011110 "
b11101111110010101111111011011110 =
b11101111110010101111111011011110 A
b11000 @
b1000 ?
1(
#45010
b1111101011111111 <
b11111010111111111010110110101111 ;
b1111101011111111101011011010111111111010101111101101101011111111 /
b1111101011111111101011011010111111111010101111101101101011111111 &
b1111101011111111101011011010111111111010101111101101101011111111 .
0#
06
05
0)
#50000
0(
#55000
b10101101 <
b10101101101011111111101010111110 ;
b10 >
b10 :
b1111101011111111 "
b1111101011111111 =
b1111101011111111 A
b100000 ?
b100000 @
1(
#55010
b10101010 <
b10101010101010101010101010101010 ;
b1011101010101010101010101010101010101010101010101010101010101101 /
b1011101010101010101010101010101010101010101010101010101010101101 &
b1011101010101010101010101010101010101010101010101010101010101101 .
#60000
0(
#65000
b10111010101010101010101010101010 <
b0 :
b10111010101010101010101010101010 ;
b0 >
b0 @
b0 ?
b10101010 "
b10101010 =
b10101010 A
1(
#65010
b10101011110011011110111100000001 <
b10101011110011011110111100000001 ;
b1010101111001101111011110000000100100011010001010110011110001001 /
b1010101111001101111011110000000100100011010001010110011110001001 &
b1010101111001101111011110000000100100011010001010110011110001001 .
#70000
0(
#75000
b10101011110011011110111100000001 "
b10101011110011011110111100000001 =
b10101011110011011110111100000001 A
1(
#75010
b1010101010101010101010101010101 <
b1010101010101010101010101010101 ;
b101010101010101010101010101010101010101010101010101010101010101 /
b101010101010101010101010101010101010101010101010101010101010101 &
b101010101010101010101010101010101010101010101010101010101010101 .
#80000
0(
#85000
b1010101010101010101010101010101 "
b1010101010101010101010101010101 =
b1010101010101010101010101010101 A
1(
#90000
0(
#95000
1(
#100000
0(
#105000
1(
#105010
b0 ,
#110000
0(
#115000
1(
#120000
0(
#125000
1(
#130000
0(
#135000
1(
