$date
	Sun Nov  3 18:08:47 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module cpu_adapter_tb $end
$var wire 9 ! word_rd_addra [8:0] $end
$var wire 32 " resized_mem_data [31:0] $end
$var wire 1 # rd_en $end
$var wire 32 $ cached_data [31:0] $end
$var wire 1 % cache_hit $end
$var reg 64 & bigword [63:0] $end
$var reg 12 ' byte_rd_addr [11:0] $end
$var reg 1 ( clk $end
$var reg 1 ) cpu_rd_en $end
$var reg 2 * transfer_sz [1:0] $end
$var integer 32 + dummy [31:0] $end
$var integer 32 , fd [31:0] $end
$scope module DUT $end
$var wire 64 - bigword [63:0] $end
$var wire 64 . bigword_i [63:0] $end
$var wire 12 / byte_rd_addr [11:0] $end
$var wire 12 0 byte_rd_addr_i [11:0] $end
$var wire 1 % cache_hit $end
$var wire 1 1 cache_hit_i $end
$var wire 32 2 cached_data [31:0] $end
$var wire 32 3 cached_data_i [31:0] $end
$var wire 1 ( clk $end
$var wire 1 ) cpu_rd_en $end
$var wire 1 4 cpu_rd_en_i $end
$var wire 1 # rd_en $end
$var wire 1 5 rd_en_i $end
$var wire 1 6 rst $end
$var wire 2 7 transfer_sz [1:0] $end
$var wire 9 8 word_rd_addra [8:0] $end
$var wire 9 9 word_rd_addra_i [8:0] $end
$var wire 2 : transfer_sz_i [1:0] $end
$var wire 32 ; selected [31:0] $end
$var wire 32 < resized_mem_data_i [31:0] $end
$var wire 32 = resized_mem_data [31:0] $end
$var wire 2 > offset_i [1:0] $end
$var reg 4 ? offset_r [3:0] $end
$var reg 4 @ transfer_sz_r [3:0] $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk4 $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
b11 9
b11 8
b0 7
z6
05
04
b111000001100110011000000111 3
b111000001100110011000000111 2
01
b1101 0
b1101 /
b0 .
b0 -
b10000000000000000000000000000011 ,
bx +
b0 *
0)
0(
b1101 '
b0 &
0%
b111000001100110011000000111 $
0#
bx "
b11 !
$end
#5000
bx00 @
bx01 ?
1(
#5010
b1 !
b1 8
b1 9
b100 +
b1000000000001001000000000001000110000000000110100000000000100 .
b1000000000001001000000000001000110000000000110100000000000100 &
b1000000000001001000000000001000110000000000110100000000000100 -
1#
15
14
1)
b111 0
b111 '
b111 /
#10000
0(
#15000
b1001000000000001000110000 "
b1001000000000001000110000 =
b1001000000000001000110000 <
b1001000000000001000110000 ;
b1 >
b0 :
b111 ?
b0 @
1(
#15010
b101011000000000011001110000 "
b101011000000000011001110000 =
b101011000000000011001110000 <
b100 !
b100 8
b100 9
b101011000000000011001110000 ;
b101000000000101011000000000011001110000000001111000000000001000 .
b101000000000101011000000000011001110000000001111000000000001000 &
b101000000000101011000000000011001110000000001111000000000001000 -
b1 *
b1 7
b10000 0
b10000 '
b10000 /
#20000
0(
#25000
b110011100000000011110000000 "
b110011100000000011110000000 =
b110011100000000011110000000 <
b110011100000000011110000000 ;
b11 >
b1 @
b1100 ?
1(
#25010
b1010101100000000101111000000 "
b1010101100000000101111000000 =
b1010101100000000101111000000 <
b0 !
b0 8
b0 9
b1010101100000000101111000000 ;
b1001000000001001101000000000101010110000000010111100000000001100 .
b1001000000001001101000000000101010110000000010111100000000001100 &
b1001000000001001101000000000101010110000000010111100000000001100 -
b10 *
b10 7
b10 0
b10 '
b10 /
#30000
0(
#35000
b1001000000001001 "
b1001000000001001 =
b1001000000001001 <
b10010000000010011010000000001010 ;
b0 >
b1 :
b10 ?
b110 @
1(
#35010
b1101111010101101 "
b1101111010101101 =
b1101111010101101 <
b11011110101011011011111011101111 ;
b1101111010101101101111101110111111001010111111101101111010101101 .
b1101111010101101101111101110111111001010111111101101111010101101 &
b1101111010101101101111101110111111001010111111101101111010101101 -
b0 *
b0 7
b0 0
b0 '
b0 /
#40000
0(
#45000
b10111110 "
b10111110 =
b10111110 <
b10 :
b10111110111011111100101011111110 ;
b10 >
b1000 @
b1000 ?
1(
#45010
b10101101 "
b10101101 =
b10101101 <
b10101101101011111111101010111110 ;
b1111101011111111101011011010111111111010101111101101101011111111 .
b1111101011111111101011011010111111111010101111101101101011111111 &
b1111101011111111101011011010111111111010101111101101101011111111 -
0#
05
04
0)
#50000
0(
#55000
b11111010111111111010110110101111 "
b11111010111111111010110110101111 =
b11111010111111111010110110101111 <
b11111010111111111010110110101111 ;
b0 >
b0 :
b0 ?
b0 @
1(
#55010
b10111010101010101010101010101010 "
b10111010101010101010101010101010 =
b10111010101010101010101010101010 <
b10111010101010101010101010101010 ;
b1011101010101010101010101010101010101010101010101010101010101101 .
b1011101010101010101010101010101010101010101010101010101010101101 &
b1011101010101010101010101010101010101010101010101010101010101101 -
#60000
0(
#65000
1(
#65010
b10101011110011011110111100000001 "
b10101011110011011110111100000001 =
b10101011110011011110111100000001 <
b10101011110011011110111100000001 ;
b1010101111001101111011110000000100100011010001010110011110001001 .
b1010101111001101111011110000000100100011010001010110011110001001 &
b1010101111001101111011110000000100100011010001010110011110001001 -
#70000
0(
#75000
1(
#75010
b1010101010101010101010101010101 "
b1010101010101010101010101010101 =
b1010101010101010101010101010101 <
b1010101010101010101010101010101 ;
b101010101010101010101010101010101010101010101010101010101010101 .
b101010101010101010101010101010101010101010101010101010101010101 &
b101010101010101010101010101010101010101010101010101010101010101 -
#80000
0(
#85000
1(
#90000
0(
#95000
1(
#100000
0(
#105000
1(
#105010
b0 +
#110000
0(
#115000
1(
#120000
0(
#125000
1(
#130000
0(
#135000
1(
