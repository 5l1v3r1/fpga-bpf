This is a "ping-pang-pong" controller. The idea is as follows:
We have three agents that all need to share memory. To make it possible
for all three to run concurrently, we need three buffers. 

Here is the strategy:

Each agent (in our specific case, the snooper, CPU, and forwarder) will 
have a queue of "jobs" (i.e. [pointers to] buffers to operate on). When one 
agent is finished (e.g. the snooper) it will enqueue [a pointer to] the buffer 
it has just processed to the jobs on the next agent's queue (e.g. the CPU).


 +-------------------------------+        +----------------+
 |  Snooper    CPU    Forwarder  |        |     Legend     |
 |   Queue    Queue    Queue     |        |----------------|
 |    +--+     +--+     +--+     |        | 00: no connect |
 |    |11|     |00|     |00|     |        | 01: Ping       |
 |    |--|     |--|     |--|     |        | 10: Pang       |
 |    |10|     |00|     |00|     |        | 11: Pong       |
 |    |--|     |--|     |--|     |        +----------------+
 |    |01|     |00|     |00|     |
 |    +--+     +--+     +--+     |
 |     |        |        |       |
 |     +-----+  |  +-----+       |
 |           |  |  |             |
 +-------------------------------+
             |  |  |     p3ctrl
             v  v  v
            To muxes

For this purpose, I wrote up snqueue.v, cpuqueue.v, and fwdqueue.v. They are
the aforementioned "job queues".

This module is intended to be used to generate the select lines on the MUXes
in packetmem.v (in order to wire up certain packetrams to certain agents).



A few examples:

Starting with the first diagram, suppose the snooper signals that it is done 
reading in a packet. This means that the Ping buffer is now full, and can be 
added to the CPU's queue of packets to check:

 +-------------------------------+        +----------------+
 |  Snooper    CPU    Forwarder  |        |     Legend     |
 |   Queue    Queue    Queue     |        |----------------|
 |    +--+     +--+     +--+     |        | 00: no connect |
 |    |00|     |00|     |00|     |        | 01: Ping       |
 |    |--|     |--|     |--|     |        | 10: Pang       |
 |    |11|     |00|     |00|     |        | 11: Pong       |
 |    |--|     |--|     |--|     |        +----------------+
 |    |10|     |01|     |00|     |
 |    +--+     +--+     +--+     |
 |     |        |        |       |
 |     +-----+  |  +-----+       |
 |           |  |  |             |
 +-------------------------------+
             |  |  |     p3ctrl
             v  v  v
            To muxes

Note also that everything else in the snooper queue shifted down.

Now, if the snooper finishes reading another packet, we have:

 +-------------------------------+        +----------------+
 |  Snooper    CPU    Forwarder  |        |     Legend     |
 |   Queue    Queue    Queue     |        |----------------|
 |    +--+     +--+     +--+     |        | 00: no connect |
 |    |00|     |00|     |00|     |        | 01: Ping       |
 |    |--|     |--|     |--|     |        | 10: Pang       |
 |    |00|     |10|     |00|     |        | 11: Pong       |
 |    |--|     |--|     |--|     |        +----------------+
 |    |11|     |01|     |00|     |
 |    +--+     +--+     +--+     |
 |     |        |        |       |
 |     +-----+  |  +-----+       |
 |           |  |  |             |
 +-------------------------------+
             |  |  |     p3ctrl
             v  v  v
            To muxes

Now the Pang buffer is added to the CPU's queue.

Carrying on, suppose the CPU rejects the packet in Ping. Then, Ping will be 
added back to the snooper's queue:

 +-------------------------------+        +----------------+
 |  Snooper    CPU    Forwarder  |        |     Legend     |
 |   Queue    Queue    Queue     |        |----------------|
 |    +--+     +--+     +--+     |        | 00: no connect |
 |    |00|     |00|     |00|     |        | 01: Ping       |
 |    |--|     |--|     |--|     |        | 10: Pang       |
 |    |01|     |00|     |00|     |        | 11: Pong       |
 |    |--|     |--|     |--|     |        +----------------+
 |    |11|     |10|     |00|     |
 |    +--+     +--+     +--+     |
 |     |        |        |       |
 |     +-----+  |  +-----+       |
 |           |  |  |             |
 +-------------------------------+
             |  |  |     p3ctrl
             v  v  v
            To muxes

And now suppose the CPU accepts the buffer in Pang:

 +-------------------------------+        +----------------+
 |  Snooper    CPU    Forwarder  |        |     Legend     |
 |   Queue    Queue    Queue     |        |----------------|
 |    +--+     +--+     +--+     |        | 00: no connect |
 |    |00|     |00|     |00|     |        | 01: Ping       |
 |    |--|     |--|     |--|     |        | 10: Pang       |
 |    |01|     |00|     |00|     |        | 11: Pong       |
 |    |--|     |--|     |--|     |        +----------------+
 |    |11|     |00|     |10|     |
 |    +--+     +--+     +--+     |
 |     |        |        |       |
 |     +-----+  |  +-----+       |
 |           |  |  |             |
 +-------------------------------+
             |  |  |     p3ctrl
             v  v  v
            To muxes

I think you get the point.


UPDATE
------
I was starting to go crazy with this method, since I really need to ability to 
have back-to-back snooping. (It's less important for the CPU and forwarder, 
since in theory they are at a lower bandwidth). This needs two things:

    - Update state machine controller to provide for back-to-back snooping
    - Allow p3ctrl to push a filter's tag into the tree even before the snooper
      finishes using a buffer.

Updating the state machine is fairly simple; I just need to add a special case 
for when the snooper asserts both its done and rdy_ack signals.

As for the other item, it needs a little more explanation.

Because the snooper (and the forwarder) use the tag tree method outlined in the 
READMEs in the parallel_cores/arbitration/ folder, I want the ability to add 
the same tags multiple times into the tree before the corresponding packet 
filter gets used.

    Example: filter 1 has three elements on the snooper's job queue, and 
    currently, the snooper is writing into filter 0. While the snooper is busy, 
    filter 1's tag can be added to the tree three times.

Well, obviously this is a major change and I want to be careful about how I do 
it.

Here's what I'm thinking: we leave the whole job queues thing untouched. It 
works, for the most part. Instead, we will calculate rdy_for_snooper and 
rdy_for_fwd based on a counter:

    - This counter is incremented whenever an item is added to the 
      corresponding queue
        - Snooper's initial count will be 3, forwarder's will be 0

    - This counter is decremented whenever the filter's tag is added to the 
      tree, NOT when a job is dequeued
    
    - rdy_for_snooper and rdy_for_forwarder simply check if the counter is 
      non-zero

So, I wrote a simple up-down counter in generic/ud_counter
