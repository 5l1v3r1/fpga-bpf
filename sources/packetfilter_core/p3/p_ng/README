This Verilog file should synthesize to a dual-port BRAM. 

Suppose I want my snooper/forwarder to have a data width of 128. Internally, I 
will actually make a dual-port BRAM with width 128/2 = 64. When the snooper and 
forwarder request an address, I append a zero to it.

Example: Snooper requests adress 0x3. This means the snooper wants the 4th 128 
bit word. Since our memory uses 64 bit word addressing, this means we actually 
want the 7th and 8th 64 bit words. We appended a zero to the address to get 
0x6.

Why would I do this?

I use the dual-porting for a really sneaky hack: since the CPU is allowed to 
read from any byte address it wants (and request 8, 16, or 32 bits) I will 
always find the two 64 bit words that straddle the address. 

Example: CPU requests 32 bits from address 0xd. This means the CPU wants the 
14th, 15th, 16th, and 17th bytes. Since the memory uses 64 bit word addressing, 
this means we need to get the 2rd and 3rd 64 bit words.


 Memory seen through byte-addressing:
 +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
 | 0| 1| 2| 3| 4| 5| 6| 7| 8| 9| a| b| c| d| e| f|10|11|12|13|14|15|16|17|
 +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                                        =============

 Same memory seen through 64-bit-word-addressing:
 +-----------------------+-----------------------+-----------------------+
 |           0           |           1           |           2           |
 +-----------------------+-----------------------+-----------------------+
 
 The tricky business of fiddling with the addresses and getting the right data 
 is done by the agent adapters.
